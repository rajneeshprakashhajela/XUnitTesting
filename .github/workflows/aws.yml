# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "main"
  ### DO NOT REMOVE COMMENTS FROM NEXT LINES - OTHERWISE VARIABLE VALUES WILL NOT BE SET ACCORDINGLY.
  ### VARIABLES STARTING WITH "CI-" COME FROM GITLAB - See https://docs.gitlab.com/ee/ci/variables/
  # CI_COMMIT_SHORT_SHA: "$CI_COMMIT_SHORT_SHA"             # Short Commit Hash, e.g. "1ecfd275"
  # CI_COMMIT_REF_NAME: "$CI_COMMIT_REF_NAME"               # Branch Name of the commit, e.g. "master"
  # CI_REPOSITORY_URL: "$CI_REPOSITORY_URL"
  # CI_PROJECT_URL: "$CI_PROJECT_URL" 
  # Gitlab repository URL, e.g. "https://gitlab-ci-token:abcde-1234ABCD5678ef@example.com/gitlab-org/gitlab-ce.git"
  # CI_PIPELINE_ID: "$CI_PIPELINE_ID"                       # Gitlab Buildnumber, e.g. "1234"
  ### 
  ### Do NOT modify anything here:
  ### 
env:
  AWS_DEFAULT_REGION: "eu-central-1"                      # AWS Region
  MY_AWS_REGION: "eu-central-1"                           # AWS Region - MY_AWS_REGION is used in case AWS_DEFAULT_REGION is set to a different value on Gitlab Project or Group Level (see https://docs.gitlab.com/ee/ci/variables/#priority-of-environment-variables)
  KUBECONFIG_DEV: "./kubeconfig_dev"                      # kubeconfig file name for DEV cluster in DEV account
  KUBECONFIG_PROD: "./kubeconfig_prod"                    # kubeconfig file name for PROD cluster in PROD account
  DOCKER_TLS_CERTDIR: ""                                  # fix regarding docker 18.09+ https://gitlab.com/gitlab-org/gitlab-runner/issues/4501 and https://gitlab.com/gitlab-org/gitlab-ce/issues/64968
  BUILD_ID: "$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA"        # Composed BuildId, e.g. "1234-1ecfd275"
  IMAGE_TAG: "pipeline-$CI_PIPELINE_ID-git-$CI_COMMIT_SHORT_SHA" # The unique tag for the docker image
  #
  # This variables are specific for DaaA and are set in Gitlab CI/CD:
  #
  AWS_ROLE_PREFIX_DEV: "$AWS_ROLE_PREFIX_DEV"             # DEV:  Prefix for gitlab runner role - value is "arn:aws:iam::343651901854:role/gitlab-runner-daaa-eks-dev-" - IAM Role naming schema is: ${AWS_ROLE_PREFIX_[DEV|PROD]} + $KUBE_NAMESPACE
  AWS_ROLE_PREFIX_PROD: "$AWS_ROLE_PREFIX_PROD"           # PROD: Prefix for gitlab runner role - value is "arn:aws:iam::507163017739:role/gitlab-runner-daaa-eks-prod-" - IAM Role naming schema is: ${AWS_ROLE_PREFIX_[DEV|PROD]} + $KUBE_NAMESPACE
  REPOSITORY_PREFIX: "$REPOSITORY_PREFIX"                 # Prefix of the AWS ECR Repository - value is "343651901854.dkr.ecr.eu-central-1.amazonaws.com/"
  KUBECONFIG_DEV_BASE64: "$KUBECONFIG_DEV_BASE64"         # Base64 encoded config file for DEV Cluster
  KUBECONFIG_PROD_BASE64: "$KUBECONFIG_PROD_BASE64"         # Base64 encoded config file for PROD Cluster



  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  KUBE_NAMESPACE: "proview"    # Name of the application/k8s-namespace/tiller-namespace - must be [dmp|pid|proview|shared|smartclass|virtuoso]
  REPOSITORY_NAME: "proview-ws" # AWS ECR repository name (e.g. dmp-fe, dmp-api) WITHOUT Prefix. This name will be appended to $REPOSITORY_PREFIX
  ### HELM_RELEASE_NAME_STAGE_{STAGE}: The name of the helm releases. Only PROD stage is allowed to be deployed to prod cluster (K8S_KUBECONFIG_PROD_FILE, K8S_NAMESPACE_PROD,TILLER_NAMESPACE_PROD)
  HELM_RELEASE_DEV: "ws-dev"
  HELM_RELEASE_QA: "ws-qa"
  HELM_RELEASE_PROD: "ws"
  HELM_VALUES_FILE_DEV: "./values-dev.yaml"
  HELM_VALUES_FILE_QA: "./values-qa.yaml"
  HELM_VALUES_FILE_PROD: "./values-prod.yaml"
  ASPNETCORE_ENVIRONMENT_DEV: "Development"
  ASPNETCORE_ENVIRONMENT_QA: "Release"
  ASPNETCORE_ENVIRONMENT_PROD: "Production"
  NUGET_CONFIG: "$NUGET_CONFIG"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
